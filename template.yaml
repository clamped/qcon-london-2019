AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Serverless application infrastructure

Parameters:

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    # e.g., "Z45J1D2QQ43H93", from the Route 53 hosted zone that will contain
    #   the domain names below.
    Default: ZJ3XHEOZ3EIRV

  CertificateDomainName:
    Type: String
    Default: "*.qcon.symphonia.io"

  RestDomainName:
    Type: String
    Default: "api.qcon.symphonia.io"

  WebSocketDomainName:
    Type: String
    Default: "api-ws.qcon.symphonia.io"

  ValidationDomain:
    Type: String
    Default: "symphonia.io"

Mappings:

  # https://docs.aws.amazon.com/general/latest/gr/rande.html#apigateway_region
  RegionMap:
    us-east-1:
      HostedZoneId: Z1UJRXOUMOOFQ8
    us-east-2:
      HostedZoneId: ZOJJZC49E0EPZ
    us-west-1:
      HostedZoneId: Z2MUQ32089INYE
    us-west-2:
      HostedZoneId: Z2OJLYMUO9EFXC
    eu-central-1:
      HostedZoneId: Z1U9ULNL0V5AJ3
    eu-west-1:
      HostedZoneId: ZLY8HYME6SFDD
    eu-west-2:
      HostedZoneId: ZJ5UAJN8Y3Z2Q
    eu-west-3:
      HostedZoneId: Z3KY65QIEKYHQQ

Globals:

  Function:
    Runtime: nodejs8.10
    MemorySize: 256
    Timeout: 10

Resources:

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: REGIONAL
      StageName: Prod

  Health:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: dist/health/index.js
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref Table
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /health
            Method: get

  # Reader:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: index.handler
  #     CodeUri: dist/reader/index.js
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref Table
  #     Policies:
  #       - DynamoDBReadPolicy:
  #           TableName: !Ref Table
  #     Events:
  #       ApiEvent:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref RestApi
  #           Path: /events/{id}
  #           Method: get

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectRouteIntegration

  ConnectRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnect.Arn}/invocations

  OnConnect:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: dist/on_connect/index.js
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnect
      Principal: apigateway.amazonaws.com

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectRouteIntegration

  DisconnectRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnect.Arn}/invocations

  OnDisconnect:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: dist/on_disconnect/index.js
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table

  DisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnect
      Principal: apigateway.amazonaws.com
  
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: send
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendRouteIntegration

  SendRouteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnSend.Arn}/invocations

  OnSend:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: dist/on_send/index.js
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table

  OnSendPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnSend
      Principal: apigateway.amazonaws.com

  Table:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub "${AWS::StackName}-table"
      AttributeDefinitions:
        - AttributeName: type
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: type
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10

# https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html
# https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-regional-api-custom-domain-create.html

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref CertificateDomainName
      DomainValidationOptions:
        - DomainName: !Ref CertificateDomainName
          ValidationDomain: !Ref ValidationDomain
      
  RestCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !Ref Certificate
      DomainName: !Ref RestDomainName
      EndpointConfiguration:
        Types: [ REGIONAL ]

  RestBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: ""
      DomainName: !Ref RestCustomDomain
      RestApiId: !Ref RestApi
      Stage: Prod

  # WebSocketCustomDomain:
  #   Type: AWS::ApiGateway::DomainName
  #   Properties:
  #     RegionalCertificateArn: !Ref Certificate
  #     DomainName: !Ref WebSocketDomainName
  #     EndpointConfiguration:
  #       Types: [ REGIONAL ]

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - SendRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref WebSocketApi
  
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      DeploymentId: !Ref WebSocketDeployment
      ApiId: !Ref WebSocketApi

  # WebSocketCustomDomain:
  #   Type: AWS::ApiGateway::DomainName
  #   Properties:
  #     RegionalCertificateArn: !Ref Certificate
  #     DomainName: !Ref WebSocketDomainName
  #     EndpointConfiguration:
  #       Types: [ REGIONAL ]

  # WebsocketBasePathMapping:
  #   Type: AWS::ApiGateway::BasePathMapping
  #   Properties:
  #     BasePath: ""
  #     DomainName: !Ref WebSocketCustomDomain
  #     RestApiId: !Ref WebSocketApi
  #     Stage: Prod

  HealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties: 
      HealthCheckConfig:
        FullyQualifiedDomainName: !Sub "${RestApi}.execute-api.${AWS::Region}.amazonaws.com"
        RequestInterval: 10
        ResourcePath: /Prod/health
        Type: HTTPS

  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt RestCustomDomain.RegionalDomainName
        EvaluateTargetHealth: false
        HostedZoneId: !FindInMap [RegionMap, !Ref "AWS::Region", HostedZoneId]
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "${RestDomainName}."
      Region: !Sub "${AWS::Region}"
      SetIdentifier: !Sub "${AWS::Region} API"
      Type: A
      HealthCheckId: !Ref HealthCheck